<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://yourdomain.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yourdomain.com/" rel="alternate" type="text/html" /><updated>2024-05-18T01:39:12+00:00</updated><id>http://yourdomain.com/feed.xml</id><title type="html">Your Site Title</title><subtitle>This is an example site description. You can use Markdown here.</subtitle><entry><title type="html">Weekly Notes for May 05</title><link href="http://yourdomain.com/blog/2024/05/05/weekly.html" rel="alternate" type="text/html" title="Weekly Notes for May 05" /><published>2024-05-05T00:00:00+00:00</published><updated>2024-05-05T00:00:00+00:00</updated><id>http://yourdomain.com/blog/2024/05/05/weekly</id><content type="html" xml:base="http://yourdomain.com/blog/2024/05/05/weekly.html"><![CDATA[<p>Long time no update. I’ve received all final grades of my last term and I’m now waiting for my completion letter for confirmation. What a wrap and I feel like all the days in the past two years helped me enormously transfer me from a child to a guy. I’ve to thanks to my</p>

<p>I’ve renewed my gym membership, upgraded my google drive to 2TB (I can’t always thinking I need to bother cleaning big video files to maintain there are enough empty space for new photos) and restarted leetcoding. While applying for job positions, I’m also start to plan how to settle and get employment in BC as the PNP application requires. Well, if I can get a job, upgrading iCloud to 2TB is a requirement since I can’t tolerate that “iCloud Storage is full” notification.</p>

<p>The ThinkPad I bought last month (see my previous weekly) is quite good, especially downgrading to Windows10, where it responses quicker and the interfaces are more familiar and handy. Now I’m using my MacBook for all entertainment, writing and using the ThinkPad as a programming playground.</p>

<p>I’m always thinking that, as a young person, time is a good remedy to my past arrogance.</p>

<p>For PNP application, I need to have a document that provides:</p>

<p><strong>Evidence of intent to settle and find employment in B.C.: Applicants to the International Post-Graduate or the EEBC International Post-Graduate streams must provide evidence of ability and intent to live and work in B.C.</strong></p>

<p>Evidence of this may include:</p>

<p><em>• the length of any previous and/or current period of residence in B.C.;</em></p>

<p><em>• your connections to B.C. through work, study or family;</em></p>

<p><em>• a description of any actions you’ve taken to permanently settle in B.C., such as finding a job or place to live;</em></p>

<p><em>• current employment in B.C.;</em></p>

<p><em>• employment search details (prospective employers, applications, networking efforts, business development, etc.);</em></p>

<p><em>• community involvement;</em></p>

<p><em>• ability to financially support yourself and your dependants (if any) in B.C.; and</em></p>

<p><em>• your plan to obtain or maintain legal authorization to work in B.C.</em></p>]]></content><author><name>aoi</name></author><category term="Blog" /><category term="Weekly" /><summary type="html"><![CDATA[Long time no update. I’ve received all final grades of my last term and I’m now waiting for my completion letter for confirmation. What a wrap and I feel like all the days in the past two years helped me enormously transfer me from a child to a guy. I’ve to thanks to my]]></summary></entry><entry><title type="html">Weekly Notes for 04-01 to 04-15</title><link href="http://yourdomain.com/blog/2024/04/15/weekly.html" rel="alternate" type="text/html" title="Weekly Notes for 04-01 to 04-15" /><published>2024-04-15T00:00:00+00:00</published><updated>2024-04-15T00:00:00+00:00</updated><id>http://yourdomain.com/blog/2024/04/15/weekly</id><content type="html" xml:base="http://yourdomain.com/blog/2024/04/15/weekly.html"><![CDATA[<p>My last semester comes to an end and not many things happened within this one or two weeks.</p>

<p>I got full marks in all three assignments of machine learning course and not to much to worry about in the finals. I will review SVM tonight and do the 22fall final tomorrow.</p>

<p>New discovery - I’ve never been to the 7th floor of the library, and there is a research common room for grad students – with punch code lock. Dual monitors, iMacs and spacious desks there. Very quiet and I consider there is a good place for me to do job searches after my finals. (Thanks a friend of me, he discovered this place. And I found that place in the last few weeks of my master’s, LOL).</p>

<p>Another thing to remind myself is that I need to use my dental benefit and eyeglasses benefit within this month, since I’ve never used them.</p>

<p>I bought a ThinkPad P52s, for only $375 (after tax), and it looks good, with 4K display. However its performance is quite unpleasant when running Windows 11. Especially it takes a lot of time to boot a Ubuntu VM using VirtualBox, looking for solution for that.</p>

<p>Do delivery for 3-4 days after this Wednesday before the final grades coming out.  Keep eyes out of phone while driving and make sure safety.</p>

<p>Take the AZ-101 test and prepare for interviews. Since no TA works for me after graduated, a job offer is all I need.</p>

<p>Songs I’ve been looping this two weeks:</p>
<ul>
  <li>Giant - Gentle Giant</li>
  <li>Bonito Generation - Kero Kero Bonito</li>
  <li>Azure d’Or</li>
  <li>Someday - Teddy Robin</li>
</ul>]]></content><author><name>aoi</name></author><category term="Blog" /><category term="Weekly" /><summary type="html"><![CDATA[My last semester comes to an end and not many things happened within this one or two weeks.]]></summary></entry><entry><title type="html">ML Reviews</title><link href="http://yourdomain.com/blog/2024/04/14/SVM.html" rel="alternate" type="text/html" title="ML Reviews" /><published>2024-04-14T00:00:00+00:00</published><updated>2024-04-14T00:00:00+00:00</updated><id>http://yourdomain.com/blog/2024/04/14/SVM</id><content type="html" xml:base="http://yourdomain.com/blog/2024/04/14/SVM.html"><![CDATA[<h1 id="cmpt-726">CMPT 726</h1>

<p>MLE, MAP, NN, SVM, OLS</p>

<h2 id="mle">MLE</h2>

<ol>
  <li>
    <p>Use the property of i.i.d, 
\(p(y_1,\cdots,y_N | x_1,\cdots,x_N, w) = \prod_{i=1}^{N}p(y_i|x_i, w)\)</p>
  </li>
  <li>
    <p>Use logarithm to scale the equation
\(\begin{aligned}
\log p(Y|X, w) &amp;= \log \prod_{i=1}^{N}p(y_i|x_i, w) \\
&amp;= \sum_{i=1}^{N} \log p(y_i|x_i, w)
\end{aligned}\)</p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Then, simplify the equation by the property of $w^* = \text{argmax}<em>w \sum</em>{i=1}^{N} \log p(y_i</td>
          <td>x_i, w) = \text{argmax}_w f(w)$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Let $L(w) = f(w)$ and solve $\frac{dL}{dw} = 0$ to get $w^*$.</li>
</ol>]]></content><author><name>aoi</name></author><category term="Blog" /><category term="Courses" /><summary type="html"><![CDATA[CMPT 726 MLE, MAP, NN, SVM, OLS MLE Use the property of i.i.d, \(p(y_1,\cdots,y_N | x_1,\cdots,x_N, w) = \prod_{i=1}^{N}p(y_i|x_i, w)\) Use logarithm to scale the equation \(\begin{aligned} \log p(Y|X, w) &amp;= \log \prod_{i=1}^{N}p(y_i|x_i, w) \\ &amp;= \sum_{i=1}^{N} \log p(y_i|x_i, w) \end{aligned}\) Then, simplify the equation by the property of $w^* = \text{argmax}w \sum{i=1}^{N} \log p(y_i x_i, w) = \text{argmax}_w f(w)$ Let $L(w) = f(w)$ and solve $\frac{dL}{dw} = 0$ to get $w^*$.]]></summary></entry><entry><title type="html">Hmm Notes</title><link href="http://yourdomain.com/blog/2024/04/11/HMM-notes.html" rel="alternate" type="text/html" title="Hmm Notes" /><published>2024-04-11T00:00:00+00:00</published><updated>2024-04-11T00:00:00+00:00</updated><id>http://yourdomain.com/blog/2024/04/11/HMM-notes</id><content type="html" xml:base="http://yourdomain.com/blog/2024/04/11/HMM-notes.html"><![CDATA[<p>The difference lies in the observability of the states and how they relate to the observations:</p>

<ul>
  <li><strong>Markov Model (MM)</strong>: <strong><em>States are directly observable</em></strong>, and each state transition corresponds to an observable event. The model focuses on state transitions.</li>
  <li><strong>Hidden Markov Model (HMM)</strong>: <strong><em>States are hidden and not directly observable.</em></strong> Each state can produce observable outputs, but these outputs do not have a one-to-one correspondence with the states, introducing a level of uncertainty about the actual state, which must be inferred from the observations.</li>
</ul>

<p>HMM are especially known for applications in <strong><em>temporal pattern recognition</em></strong>.</p>

<h5 id="hmm-operation">HMM Operation</h5>

<p>For $H = {N, M, A, B, \pi}$, $H$ can be used as a genenrator for an observation sequence, $O = O_1, O_2, O_3, …, O_T$, where each observation $O_t$ is a symbol from $V$, and $T$ is the number of observations in the sequence as follows.</p>

<ol>
  <li>Choose an initial state $q_1 = S_i$ according to the initial state distribution $\pi$.</li>
  <li>Set $t=1$.</li>
  <li>Choose $O_t = v_k$ according to the observation symbol probability distribution in state $S_i$ as determined by $b_j(k)$. (generate a observation based on the distribution of $B$)</li>
  <li>Transition to state $q_{t+1}=S_j$ according to the state transition probability distribution for state $S_i$ as determined by ${a_{ij}}$.</li>
  <li>Return to step 3, if $t&lt;T$; otherwise, <strong>terminate</strong>.</li>
</ol>

<p>3 basic problems need to be solved for a model to be used in real-world applications.</p>

<ol>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Given the observation sequence $O=O_1,…,O_t$ and a model $\lambda= (A, B, \pi)$, how do we efficiently compute $P(O</td>
          <td>\lambda)$​.</td>
        </tr>
      </tbody>
    </table>
    <ol>
      <li>brute force:
        <ol>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>We can obtain the distribution of $P(O</td>
                  <td>Q, \lambda) = \prod b_q(O)$</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>We can obtain the distribution of $P(Q</td>
                  <td>\lambda) = \pi \prod a_{i, i+1}$</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>$P(O</td>
                  <td>\lambda) = P(O</td>
                  <td>Q, \lambda) P(Q</td>
                  <td>\lambda)$​ (joint probability)</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>not efficient! (take exponetial times to calculate)</li>
        </ol>
      </li>
      <li>forward-backward procedure:
        <ol>
          <li>$\alpha$</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Given the observation sequence and model, how do we choose a corresponding state sequence $Q=q_1q_2 … q_T$ that is optimal in some meaningful sense. (attempting to uncover the hidden part)</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Given the observation sequence and model, how do we adjust the model parameters $A, B$ and $\pi$ to maximize $P(O</td>
          <td>\lambda)$.</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>

<p>The observation sequence used to adjust the model parameters is called a training sequence since it is used to train the HMM.</p>

<p>Solutions to these problems.</p>]]></content><author><name>aoi</name></author><category term="Blog" /><category term="Courses" /><summary type="html"><![CDATA[The difference lies in the observability of the states and how they relate to the observations:]]></summary></entry><entry><title type="html">Mamiya Rz67</title><link href="http://yourdomain.com/2024/04/02/mamiya-rz67.html" rel="alternate" type="text/html" title="Mamiya Rz67" /><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>http://yourdomain.com/2024/04/02/mamiya-rz67</id><content type="html" xml:base="http://yourdomain.com/2024/04/02/mamiya-rz67.html"><![CDATA[<p>% Placeholder for the review of Mamiya RZ67 camera.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[% Placeholder for the review of Mamiya RZ67 camera.]]></summary></entry><entry><title type="html">Pthreads</title><link href="http://yourdomain.com/2024/03/28/pthreads.html" rel="alternate" type="text/html" title="Pthreads" /><published>2024-03-28T00:00:00+00:00</published><updated>2024-03-28T00:00:00+00:00</updated><id>http://yourdomain.com/2024/03/28/pthreads</id><content type="html" xml:base="http://yourdomain.com/2024/03/28/pthreads.html"><![CDATA[<h1 id="pthread-stdthread-in-cpp"><code class="language-plaintext highlighter-rouge">pthread</code> (<code class="language-plaintext highlighter-rouge">std::thread</code>) in CPP</h1>

<h2 id="sample-shared-message-queue">Sample: Shared Message Queue</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp">
</span>
<span class="c1">// std::vector&lt;std::string&gt; shared_list = {};</span>
<span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">shared_list</span> <span class="o">=</span> <span class="p">{};</span>
<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mtx_list</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">cv_list</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">ready</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">keyboard</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">quit</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">input</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">quit</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//std::cout &lt;&lt; "\n" &lt;&lt; "Enter a word: ";</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">input</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">"!"</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">quit</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">mtx_list</span><span class="p">);</span>
            <span class="n">shared_list</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
            <span class="n">ready</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="n">cv_list</span><span class="p">.</span><span class="n">notify_all</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">input</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Exiting the keyboard thread."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">screen</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">quit</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_output</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">quit</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">mtx_list</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ready</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cv_list</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">lck</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">shared_list</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">to_output</span> <span class="o">=</span> <span class="n">shared_list</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">to_output</span> <span class="o">==</span> <span class="s">"!"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">quit</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">to_output</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">;</span>

            <span class="n">shared_list</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">ready</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Exiting the screen thread."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t_keyboard</span><span class="p">(</span><span class="n">keyboard</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t_screen</span><span class="p">(</span><span class="n">screen</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Here is a demo of using std::thread to control a shared list."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="n">t_keyboard</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t_screen</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="components">Components</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vector</code>
    <ul>
      <li></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">queue</code>
    <ul>
      <li>member variables</li>
      <li>member functions</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">thread</code>
    <ul>
      <li>member variables</li>
      <li>member functions</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">mutex</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">std::mutex</code>
        <ul>
          <li></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">std::lock_guard&lt;&gt;</code></li>
      <li><code class="language-plaintext highlighter-rouge">std::unique_lock&lt;&gt;</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">condition_variable</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">std::condition_variable</code></li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[pthread (std::thread) in CPP]]></summary></entry><entry><title type="html">Sockets</title><link href="http://yourdomain.com/2024/03/25/sockets.html" rel="alternate" type="text/html" title="Sockets" /><published>2024-03-25T00:00:00+00:00</published><updated>2024-03-25T00:00:00+00:00</updated><id>http://yourdomain.com/2024/03/25/sockets</id><content type="html" xml:base="http://yourdomain.com/2024/03/25/sockets.html"><![CDATA[<h2 id="initialize-a-socket">Initialize a socket</h2>
<ul>
  <li>Create a socket: <code class="language-plaintext highlighter-rouge">socket()</code>, specifying the address family and socket type.</li>
  <li>Bind to address: <code class="language-plaintext highlighter-rouge">bind()</code>, specifying the local address to listen on.</li>
  <li>Listen on the socket: <code class="language-plaintext highlighter-rouge">listen()</code>, specifying the backlog size.</li>
  <li>Accept incoming connection: <code class="language-plaintext highlighter-rouge">accpet()</code>, creating new socket fd for the connection.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Initialize a socket Create a socket: socket(), specifying the address family and socket type. Bind to address: bind(), specifying the local address to listen on. Listen on the socket: listen(), specifying the backlog size. Accept incoming connection: accpet(), creating new socket fd for the connection.]]></summary></entry></feed>